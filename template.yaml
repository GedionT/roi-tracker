AWSTemplateFormatVersion : "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: A serverless stack using API Gateway, Lambda, DynamoDB

Parameters:
  StageNameParameter:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
    Description: Enter stage name, one of dev, qa, or prod. Default is dev.
  ServiceNameParameter:
    Type: String
    Default: roi-tracker
    AllowedValues:
      - roi-tracker
    Description: The service name.

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ServiceNameParameter}-${StageNameParameter}-tracker"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  TrackerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceNameParameter}-${StageNameParameter}-tracker"
      Runtime: python3.6
      Handler: success_lambda.lambda_handler
      CodeUri: ./src/success/build
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      Events:
        PostResoureApiEndpoint:
          Type: Api
          Properties:
            Path: /successes
            Method: POST
            RestApiId: !Ref SuccessApi
        GetResourceApiEndpoint:
          Type: Api
          Properties:
            Path: /successes
            Method: GET
            RestApiId: !Ref SuccessApi
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt "DynamoDBTable.Arn"


  ReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceNameParameter}-${StageNameParameter}-report"
      Runtime: python3.6
      Handler: report_lambda.lambda_handler
      CodeUri: ./src/report/build
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      Events:
        ReportApiEndpoint:
          Type: Api
          Properties:
            Path: /report
            Method: GET
            RestApiId: !Ref ReportApi
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt "DynamoDBTable.Arn"


  SuccessApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ServiceNameParameter}-${StageNameParameter}-success"
      StageName: !Sub "${StageNameParameter}"
      DefinitionBody:
        swagger: 2.0
        info:
          title: ROI Tracker - Success
        basePath: /
        schemes:
        - https
        x-amazon-apigateway-request-validators:
          basic:
            validateRequestBody : true
            validateRequestParameters : true
        paths:
          /successes:
            post:
              x-amazon-apigateway-request-validator: basic
              parameters:
              - in: body
                name: Provider
                required: true
                schema:
                  "$ref": "#/definitions/Success"
              tags:
              - "success"
              produces:
              - application/json
              responses:
                '200':
                  description: "Successful Operation."
                  schema:
                    $ref: "#/definitions/Success"
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/definitions/Success'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TrackerFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              tags:
              - "success"
              summary: "Gets all successes"
              description: "Returns all successes."
              operationId: "getSuccesses"
              produces:
              - "application/json"
              responses:
                '200':
                  description: "Successful Operation."
                  schema:
                    type: "array"
                    items:
                      $ref: "#/definitions/Success"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TrackerFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: GET
                type: aws_proxy
          /successes/{ID}:
            get:
              tags:
              - "success"
              summary: "Find success by ID."
              description: "Returns a single success."
              operationId: "getSuccessById"
              produces:
              - "application/json"
              parameters:
              - name: "ID"
                in: "path"
                description: "ID for a success."
                required: true
                type: "integer"
                format: "int64"
              responses:
                '200':
                  description: "Successful operation."
                '400':
                  description: "Invalid ID supplied."
                '404':
                  description: "Success not found."
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TrackerFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: GET
                type: aws_proxy
            put:
              tags:
              - "success"
              summary: "Update an existing success."
              description: ""
              operationId: "updateSuccess"
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "path"
                name: "ID"
                description: "ID for a Success."
                required: true
                type: "integer"
                format: "int64"
              - in: "body"
                name: "body"
                description: "Success object that needs to be updated."
                required: true
                schema:
                  $ref: "#/definitions/Success"
              responses:
                '200':
                  description: "Successful operation."
                  schema:
                    $ref: "#/definitions/Success"
                '400':
                  description: "Invalid ID supplied."
                '404':
                  description: "Success not found."
                '405':
                  description: "Validation exception."
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TrackerFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: PUT
                type: aws_proxy
            delete:
              tags:
              - "success"
              summary: "Update an existing success."
              description: ""
              operationId: "updateSuccess"
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "path"
                name: "ID"
                description: "ID for a Success."
                required: true
                type: "integer"
                format: "int64"
              responses:
                '200':
                  description: "Successful operation."
                  schema:
                    $ref: "#/definitions/Success"
                '400':
                  description: "Invalid ID supplied."
                '404':
                  description: "Success not found."
                '405':
                  description: "Validation exception."
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TrackerFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: DELETE
                type: aws_proxy
          /report:
            get:
              tags:
              - "report"
              summary: "Gets a report of successes"
              description: "Returns a report of success."
              operationId: "getReport"
              produces:
              - "application/json"
              parameters:
              - in: query
                name: start
                schema:
                  type: string
                description: "Start date for report."
              - in: query
                name: end
                schema:
                  type: string
                description: "End date for report."
              - in: query
                name: limit
                schema:
                  type: integer
                description: "The numbers of items to return."
              responses:
                '200':
                  description: "Successful operation."
                '400':
                  description: "Invalid query supplied."
                '404':
                  description: "Report not found."
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TrackerFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: GET
                type: aws_proxy
        definitions:
          Success:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
              issue:
                type: "string"
                description: "The problem that needed to be solved."
              innovation:
                type: "string"
                description: "What was created or changed, ie, a tool or process."
              cost:
                type: "integer"
                format: "int32"
                description: "Cost savings in USD cents."
              start_date:
                type: "string"
                format: "date-time"
                description: "When in time to start counting the success."
              duration:
                type: "integer"
                format: "int32"
                description: "Length of time saved in seconds."
              recurring:
                type: "string"
                description: "How often this action was occurring."
                enum:
                - "once"
                - "daily"
                - "weekly"
                - "monthly"
                - "yearly"
              statement:
                type: "string"
                description: "The full written statement to replace generated one."
              employee_multiplier:
                type: "integer"
                format: "int32"
                description: "How many employees were doing the action."
              employee_salary:
                type: "integer"
                format: "int32"
                description: "Salary of employees in the multiplier in dollars/year."

  ReportApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ServiceNameParameter}-${StageNameParameter}-report"
      StageName: !Sub "${StageNameParameter}"
      DefinitionBody:
        swagger: 2.0
        info:
          title: ROI Tracker - Report
        basePath: /
        schemes:
        - https
        x-amazon-apigateway-request-validators:
          basic:
            validateRequestBody : true
            validateRequestParameters : true
        paths:
          /report:
            get:
              tags:
              - "report"
              summary: "Gets a report of successes"
              description: "Returns a report of successes."
              operationId: "getReport"
              produces:
              - "application/json"
              parameters:
              - in: query
                name: start
                schema:
                  type: string
                description: "Start date for report."
              - in: query
                name: end
                schema:
                  type: string
                description: "End date for report."
              - in: query
                name: limit
                schema:
                  type: integer
                description: "The numbers of items to return."
              responses:
                '200':
                  description: "Successful operation."
                '400':
                  description: "Invalid query supplied."
                '404':
                  description: "Report not found."
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReportFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: GET
                type: aws_proxy

Outputs:

    SuccessApi:
      Description: "Success API Gateway endpoint URL "
      Value: !Sub "https://${SuccessApi}.execute-api.${AWS::Region}.amazonaws.com/${StageNameParameter}/success"

    ReportApi:
      Description: "Report API Gateway endpoint URL "
      Value: !Sub "https://${SuccessApi}.execute-api.${AWS::Region}.amazonaws.com/${StageNameParameter}/report"

    TrackerFunction:
      Description: "Success Lambda Function ARN"
      Value: !GetAtt TrackerFunction.Arn
