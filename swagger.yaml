swagger: "2.0"
info:
  description: "Tool to track your successes over time and provide business reports. "
  version: "1.0.0"
  title: "ROI-Tracker"
  contact:
    email: "mbrenner24@gmail.com"
host: "test.execute-api.us-1-east.amazonaws.com"
basePath: "/v1"
tags:
- name: "successes"
  description: "Everything about your successes."
schemes:
- "https"
- "http"
paths:
  /successes:
    post:
      summary: "Add a new success."
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Success object that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/success"
      responses:
        405:
          description: "Invalid input."
    put:
      summary: "Update an existing success."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Success object that needs to be modified."
        required: true
        schema:
          $ref: "#/definitions/success"
      responses:
        400:
          description: "Invalid ID supplied."
        404:
          description: "Success not found."
        405:
          description: "Validation exception."
    get:
      summary: "Get all successes"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Success not found."
  /successes/{successId}:
    get:
      summary: "Find success by ID"
      description: "Returns a single success."
      produces:
      - "application/json"
      parameters:
      - name: "successId"
        in: "path"
        description: "ID of success to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/success"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Success not found."
#  /pet/findByStatus:
#    get:
#      tags:
#      - "pet"
#      summary: "Finds Pets by status"
#      description: "Multiple status values can be provided with comma separated strings"
#      operationId: "findPetsByStatus"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - name: "status"
#        in: "query"
#        description: "Status values that need to be considered for filter"
#        required: true
#        type: "array"
#        items:
#          type: "string"
#          enum:
#          - "available"
#          - "pending"
#          - "sold"
#          default: "available"
#        collectionFormat: "multi"
#      responses:
#        200:
#          description: "successful operation"
#          schema:
#            type: "array"
#            items:
#              $ref: "#/definitions/Pet"
#        400:
#          description: "Invalid status value"
#      security:
#      - petstore_auth:
#        - "write:pets"
#        - "read:pets"
#  /pet/findByTags:
#    get:
#      tags:
#      - "pet"
#      summary: "Finds Pets by tags"
#      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
#      operationId: "findPetsByTags"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - name: "tags"
#        in: "query"
#        description: "Tags to filter by"
#        required: true
#        type: "array"
#        items:
#          type: "string"
#        collectionFormat: "multi"
#      responses:
#        200:
#          description: "successful operation"
#          schema:
#            type: "array"
#            items:
#              $ref: "#/definitions/Pet"
#        400:
#          description: "Invalid tag value"
#      security:
#      - petstore_auth:
#        - "write:pets"
#        - "read:pets"
#      deprecated: true
#  /pet/{petId}:
#    get:
#      tags:
#      - "pet"
#      summary: "Find pet by ID"
#      description: "Returns a single pet"
#      operationId: "getPetById"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - name: "petId"
#        in: "path"
#        description: "ID of pet to return"
#        required: true
#        type: "integer"
#        format: "int64"
#      responses:
#        200:
#          description: "successful operation"
#          schema:
#            $ref: "#/definitions/Pet"
#        400:
#          description: "Invalid ID supplied"
#        404:
#          description: "Pet not found"
#      security:
#      - api_key: []
#    post:
#      tags:
#      - "pet"
#      summary: "Updates a pet in the store with form data"
#      description: ""
#      operationId: "updatePetWithForm"
#      consumes:
#      - "application/x-www-form-urlencoded"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - name: "petId"
#        in: "path"
#        description: "ID of pet that needs to be updated"
#        required: true
#        type: "integer"
#        format: "int64"
#      - name: "name"
#        in: "formData"
#        description: "Updated name of the pet"
#        required: false
#        type: "string"
#      - name: "status"
#        in: "formData"
#        description: "Updated status of the pet"
#        required: false
#        type: "string"
#      responses:
#        405:
#          description: "Invalid input"
#      security:
#      - petstore_auth:
#        - "write:pets"
#        - "read:pets"
#    delete:
#      tags:
#      - "pet"
#      summary: "Deletes a pet"
#      description: ""
#      operationId: "deletePet"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - name: "api_key"
#        in: "header"
#        required: false
#        type: "string"
#      - name: "petId"
#        in: "path"
#        description: "Pet id to delete"
#        required: true
#        type: "integer"
#        format: "int64"
#      responses:
#        400:
#          description: "Invalid ID supplied"
#        404:
#          description: "Pet not found"
#      security:
#      - petstore_auth:
#        - "write:pets"
#        - "read:pets"
#  /pet/{petId}/uploadImage:
#    post:
#      tags:
#      - "pet"
#      summary: "uploads an image"
#      description: ""
#      operationId: "uploadFile"
#      consumes:
#      - "multipart/form-data"
#      produces:
#      - "application/json"
#      parameters:
#      - name: "petId"
#        in: "path"
#        description: "ID of pet to update"
#        required: true
#        type: "integer"
#        format: "int64"
#      - name: "additionalMetadata"
#        in: "formData"
#        description: "Additional data to pass to server"
#        required: false
#        type: "string"
#      - name: "file"
#        in: "formData"
#        description: "file to upload"
#        required: false
#        type: "file"
#      responses:
#        200:
#          description: "successful operation"
#          schema:
#            $ref: "#/definitions/ApiResponse"
#      security:
#      - petstore_auth:
#        - "write:pets"
#        - "read:pets"
#securityDefinitions:
#  petstore_auth:
#    type: "oauth2"
#    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
#    flow: "implicit"
#    scopes:
#      write:pets: "modify pets in your account"
#      read:pets: "read your pets"
#  api_key:
#    type: "apiKey"
#    name: "api_key"
#    in: "header"
definitions:
  success:
    type: "object"
#    required:
#      - "innovation"
#      - "startDate"
    properties:
      id:
        type: "integer"
        format: "int64"
      issue:
        type: "string"
        description: "The problem that needed to be solved."
      innovation:
        type: "string"
        description: "What was created or changed, ie, a tool or process."
      cost:
        type: "integer"
        format: "int32"
        description: "Cost savings in USD cents."
      startDate:
        type: "string"
        format: "date-time"
        description: "When in time to start counting the success."
      duration:
        type: "integer"
        format: "int32"
        description: "Length of time saved in seconds."
      recurring:
        type: "string"
        description: "How often this action was occurring."
        enum:
        - "once"
        - "daily"
        - "weekly"
        - "monthly"
        - "yearly"
      statement:
        type: "string"
        description: "The full written statement to replace generated one."
      employee_multiplier:
        type: "integer"
        format: "int32"
        description: "How many employees were doing the action."
      employee_salary:
        type: "integer"
        format: "int32"
        description: "Salary of employees in the multiplier."